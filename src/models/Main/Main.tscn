[gd_scene load_steps=17 format=2]

[ext_resource path="res://models/Player/Player.tscn" type="PackedScene" id=1]
[ext_resource path="res://models/Enemy/Ant.tscn" type="PackedScene" id=2]
[ext_resource path="res://models/Main/Main.gd" type="Script" id=3]
[ext_resource path="res://fonts/ariblk.ttf" type="DynamicFontData" id=4]
[ext_resource path="res://models/Hud/HUD.tscn" type="PackedScene" id=5]
[ext_resource path="res://models/ExpBar/ExpBar.tscn" type="PackedScene" id=6]
[ext_resource path="res://models/Hud/PauseMenu.tscn" type="PackedScene" id=7]
[ext_resource path="res://models/Wall/wall.tscn" type="PackedScene" id=8]
[ext_resource path="res://assets/songs/Peaceful_music_theme.ogg" type="AudioStream" id=9]
[ext_resource path="res://assets/img/background.png" type="Texture" id=10]
[ext_resource path="res://assets/img/EmptyBackground.png" type="Texture" id=11]

[sub_resource type="Curve2D" id=1]
_data = {
"points": PoolVector2Array( 0, 0, 0, 0, 878.035, -38.8325, 0, 0, 0, 0, 879.315, 1941.73, 0, 0, 0, 0, -36.0027, 1936.76, 0, 0, 0, 0, -39.2034, -61.2263, 0, 0, 0, 0, 878.675, -58.7378, 0, 0, 0, 0, 878.035, -38.8325 )
}

[sub_resource type="DynamicFont" id=2]
size = 20
font_data = ExtResource( 4 )

[sub_resource type="DynamicFont" id=3]
size = 30
font_data = ExtResource( 4 )

[sub_resource type="Shader" id=4]
code = "/*
Colorblindness correction shader with adjustable intensity. Can correct for:
* Protanopia (Greatly reduced reds)
* Deuteranopia (Greatly reduced greens)
* Tritanopia (Greatly reduced blues)

The correction algorithm is taken from http://www.daltonize.org/search/label/Daltonize

This shader is released under the CC0 license. Feel free to use, improve and change this shader and consider sharing the modified result.
*/

shader_type canvas_item;

// Color correction mode
// 0 - Default
// 1 - Protanopia
// 2 - Deutranopia
// 3 - Tritanopia
uniform int mode : hint_range(0, 3) = 0;

uniform float intensity : hint_range(0.0, 1.0) = 1.0;

void fragment()
{
	vec4 tex = texture(SCREEN_TEXTURE, SCREEN_UV);
	
	float L = (17.8824 * tex.r) + (43.5161 * tex.g) + (4.11935 * tex.b);
	float M = (3.45565 * tex.r) + (27.1554 * tex.g) + (3.86714 * tex.b);
	float S = (0.0299566 * tex.r) + (0.184309 * tex.g) + (1.46709 * tex.b);

	float l, m, s;
	if (mode == 0) //Default
	{
		l = L;
		m = M;
		s = S;
	}
	
	if (mode == 1) //Protanopia
	{
		l = 0.0 * L + 2.02344 * M + -2.52581 * S;
		m = 0.0 * L + 1.0 * M + 0.0 * S;
		s = 0.0 * L + 0.0 * M + 1.0 * S;
	}
	
	if (mode == 2) //Deuteranopia
	{
		l = 1.0 * L + 0.0 * M + 0.0 * S;
    	m = 0.494207 * L + 0.0 * M + 1.24827 * S;
    	s = 0.0 * L + 0.0 * M + 1.0 * S;
	}
	
	if (mode == 3) //Tritanopia
	{
		l = 1.0 * L + 0.0 * M + 0.0 * S;
    	m = 0.0 * L + 1.0 * M + 0.0 * S;
    	s = -0.395913 * L + 0.801109 * M + 0.0 * S;
	}
	
	vec4 error;
	error.r = (0.0809444479 * l) + (-0.130504409 * m) + (0.116721066 * s);
	error.g = (-0.0102485335 * l) + (0.0540193266 * m) + (-0.113614708 * s);
	error.b = (-0.000365296938 * l) + (-0.00412161469 * m) + (0.693511405 * s);
	error.a = 1.0;
	vec4 diff = tex - error;
	vec4 correction;
	correction.r = 0.0;
	correction.g =  (diff.r * 0.7) + (diff.g * 1.0);
	correction.b =  (diff.r * 0.7) + (diff.b * 1.0);
	correction = tex + correction;
	correction.a = tex.a * intensity;
	
	COLOR = correction;
}"

[sub_resource type="ShaderMaterial" id=5]
resource_local_to_scene = true
shader = SubResource( 4 )
shader_param/mode = 0
shader_param/intensity = 0.5

[node name="Main" type="Node" groups=["main"]]
script = ExtResource( 3 )
enemy_scene = ExtResource( 2 )

[node name="Background" type="Sprite" parent="."]
position = Vector2( 930, 905.5 )
scale = Vector2( 1.26712, 1.27214 )
texture = ExtResource( 10 )

[node name="Player" parent="." instance=ExtResource( 1 )]
position = Vector2( 894, 927 )

[node name="EnemiesPath" type="Path2D" parent="."]
position = Vector2( 153.71, 108.476 )
scale = Vector2( 1.8802, 0.840755 )
curve = SubResource( 1 )

[node name="EnemiesPathLocation" type="PathFollow2D" parent="EnemiesPath"]
position = Vector2( 878.035, -38.8325 )
rotation = 1.57015

[node name="EnemiesTimer" type="Timer" parent="."]

[node name="HUD" parent="." instance=ExtResource( 5 )]

[node name="PauseMenu" parent="." instance=ExtResource( 7 )]
pause_mode = 2
visible = false

[node name="HudDatos" type="CanvasLayer" parent="."]

[node name="TimerText" type="Label" parent="HudDatos"]
margin_left = 815.0
margin_top = 10.0
margin_right = 1025.0
margin_bottom = 50.0
custom_fonts/font = SubResource( 2 )

[node name="PlayWaveTimer" type="Timer" parent="HudDatos"]

[node name="ExpBar" parent="HudDatos" instance=ExtResource( 6 )]
margin_left = 20.0
margin_top = 15.0
margin_right = 176.0
margin_bottom = 29.0

[node name="NumberWaveTimer" type="Timer" parent="HudDatos"]

[node name="NumberWave" type="Label" parent="HudDatos/NumberWaveTimer"]
margin_left = 271.0
margin_top = 130.0
margin_right = 693.0
margin_bottom = 182.0
custom_fonts/font = SubResource( 3 )
align = 1

[node name="WaitEnemyDieTimer" type="Timer" parent="HudDatos"]

[node name="wall" parent="." instance=ExtResource( 8 )]
position = Vector2( 12, 0 )
scale = Vector2( 1, 3.033 )

[node name="wall2" parent="." instance=ExtResource( 8 )]
position = Vector2( 25, 1788 )
scale = Vector2( 1, 3.012 )

[node name="wall3" parent="." instance=ExtResource( 8 )]
position = Vector2( 14, 42 )
rotation = 0.0
scale = Vector2( 1, 2.83 )

[node name="wall4" parent="." instance=ExtResource( 8 )]
position = Vector2( 1848, 42 )
rotation = 0.0
scale = Vector2( 1, 2.83 )

[node name="SpringMusicTheme" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 9 )
bus = "Music"

[node name="BlindnessFilter" type="Sprite" parent="."]
material = SubResource( 5 )
position = Vector2( 947, 901.5 )
scale = Vector2( 9.67, 9.215 )
texture = ExtResource( 11 )

[connection signal="timeout" from="EnemiesTimer" to="." method="_on_EnemiesTimer_timeout"]
[connection signal="start_game" from="HUD" to="." method="new_game"]
[connection signal="timeout" from="HudDatos/PlayWaveTimer" to="." method="_on_PlayWaveTimer_timeout"]
[connection signal="timeout" from="HudDatos/NumberWaveTimer" to="." method="_on_NumberWaveTimer_timeout"]
[connection signal="timeout" from="HudDatos/WaitEnemyDieTimer" to="." method="_on_WaitEnemyDieTimer_timeout"]
